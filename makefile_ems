NAME=game.js
VERSION_MAJOR=0
VERSION_MINOR=0

CXX=em++
CONFIG = #-D CORE_CONFIG \
	#-D PROJECT_NAME=\"${NAME}\"\
	#-D VERSION_MAJOR=${VERSION_MAJOR} \
	#-D VERSION_MINOR=${VERSION_MINOR} \
	#-D WINDOW_WIDTH=800 \
	#-D WINDOW_HEIGHT=600 \
	#-D VERBOSE_UNHANDLED_EVENTS \
	#-D USE_SDL2_IMAGE \
	#-D USE_SDL2_NET \
	#-D USE_SDL2_TTF

__CXXFLAGS=-O2 -g -std=c++17 \
	-Wall -Wextra -pedantic \
	-I${HOME}/workspace/cpp/sdl/libs-emsdk/include/ \
	-sUSE_SDL=2 -sUSE_SDL_IMAGE=2 \
	-sSDL2_IMAGE_FORMATS='["png"]'
	#-lSDL2 \
	#-lSDL2main \
	#-lSDL2_image \
	#-lSDL2_ttf \
	#-lSDL2_mixer \
	#-lSDL2_net

__LDFLAGS=${__CXXFLAGS} \
	-L${HOME}/workspace/cpp/sdl/libs-emsdk/build/ \
	-sASSERTIONS=1 \
	-sINITIAL_MEMORY=104857600
	#-sALLOW_MEMORY_GROWTH=1 

LDXX=em++


IDIR=src
SDIR=src
BDIR=bin_ems
ODIR=obj_ems
DDIR=dep_ems
ASSETS_DIR=assets

_CXXFLAGS = ${__CXXFLAGS} ${CONFIG} -I${IDIR} -I${ODIR}/${IDIR} ${CXXFLAGS}
_LDFLAGS = ${__LDFLAGS} ${CONFIG} ${CXXFLAGS}

SRC = $(shell find ${SDIR} -type f -name '*.cpp' -o -name ".backup" -prune -type f)
OBJ = $(patsubst ${SDIR}/%.cpp,${ODIR}/%.o,${SRC})
DEP = $(patsubst ${SDIR}/%.cpp,${DDIR}/%.dep,${SRC})
ASSETS = $(shell find ${ASSETS_DIR} -type f -o -name ".backup" -prune -type f)
#NEW_ASSETS = $(patsubst %,${BDIR}/%, ${ASSETS})

ifndef VERBOSE
.SILENT:
endif

build: depend ${SRC} ${BDIR}/${NAME} assets html_files # ctags

html_files: html/*
	echo "Adding static files"
	cp -v html/* ${BDIR}/

${DEP}: ${DDIR}/%.dep: ${SDIR}/%.cpp
	mkdir -p ${DDIR}
	echo "Calculating dependencies for $<"
	mkdir -p $$(dirname $@)
	${CXX} ${_CXXFLAGS} $< -MM -MP -MT $(patsubst ${SDIR}/%.cpp,${ODIR}/%.o,$<) > $@

depend: ${DEP}
include ${DEP}

${OBJ}: ${ODIR}/%.o: ${SDIR}/%.cpp makefile_ems
	# mkdir -p ${ODIR}
	echo "Compiling $@"
	mkdir -p $$(dirname $@)
	${CXX} -c -o $@ $< ${_CXXFLAGS}

OBJ_LDREL = $(patsubst %,../%,${OBJ})
${BDIR}/${NAME}: ${OBJ} assets
	mkdir -p ${BDIR}
	echo "Linking ${NAME}"
	cd ${BDIR}; \
	$(LDXX) -o ${NAME} ${OBJ_LDREL} \
		${_CXXFLAGS} ${_LDFLAGS} \
		--preload-file ${ASSETS_DIR}

clean:
	echo "Cleaning build files"
	rm -r ${ODIR} ${DDIR}
	# rm tags

run: build
	echo "Running ${NAME}"
	cd ${BDIR} && ./${NAME} $(ARGS)

ctags: ${SRC}
	echo "Generating ctags"
	ctags -R ${IDIR} ${SDIR}

assets: ${BDIR}/${ASSETS_DIR}/STAMP

${BDIR}/${ASSETS_DIR}/STAMP: ${ASSETS}
	if [ -d "${BDIR}/${ASSETS_DIR}" ]; then \
		rm -r "${BDIR}/${ASSETS_DIR}"; \
	fi
	mkdir -p "${BDIR}"
	cp -r "${ASSETS_DIR}" "${BDIR}/${ASSETS_DIR}"
	echo "Preparing assets"
	cd ${BDIR}/${ASSETS_DIR}
	if [ -f "${BDIR}/${ASSETS_DIR}/prepare.sh" ]; then \
		${BDIR}/${ASSETS_DIR}/prepare.sh; \
	fi
	touch $@


CFG_FILES = $(shell find ${IDIR} -type f -name '*.hpp.in' -o -name ".backup" -prune -type f)
CFG_PARSED = $(patsubst ${IDIR}/%.hpp.in,${ODIR}/${IDIR}/%.hpp,${CFG_FILES})

config: ${CFG_PARSED}

${CFG_PARSED}: ${ODIR}/${IDIR}/%.hpp : ${IDIR}/%.hpp.in
	mkdir -p ${ODIR}/${IDIR}
	mkdir -p $$(dirname $@)
	echo "Creating empty $@"
	touch $@ -d "$$(stat -c %y $<)"

